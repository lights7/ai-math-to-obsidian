/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Katex2MathjaxConverterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enableDefaultPasteConversion: true
};
var Katex2MathjaxConverterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MathJaxConverterSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("editor-paste", async (evt, editor) => {
        var _a;
        const clipboardText = ((_a = evt.clipboardData) == null ? void 0 : _a.getData("text")) || "";
        const convertedText = this.settings.enableDefaultPasteConversion ? convertKatexToMathJax(clipboardText) : clipboardText;
        if (clipboardText) {
          evt.preventDefault();
          editor.replaceSelection(convertedText);
        }
      })
    );
    this.addCommand({
      id: "paste-katex-to-mathjax",
      name: "Paste with conversion",
      editorCallback: (editor) => {
        navigator.clipboard.readText().then((clipboardText) => {
          const convertedText = convertKatexToMathJax(clipboardText);
          editor.replaceSelection(convertedText);
        });
      }
    });
    this.addCommand({
      id: "convert-editor-text-from",
      name: "Convert current text file",
      editorCallback: (editor) => {
        const currentText = editor.getValue();
        const convertedText = convertKatexToMathJax(currentText);
        editor.setValue(convertedText);
      }
    });
    this.addCommand({
      id: "convert-all-files-from",
      name: "Convert all files",
      callback: async () => {
        const files = this.app.vault.getMarkdownFiles();
        for (const file of files) {
          const content = await this.app.vault.read(file);
          const convertedContent = convertKatexToMathJax(content);
          await this.app.vault.modify(file, convertedContent);
        }
        new import_obsidian.Notice("Text in the whole vault is converted from KaTeX to MathJax format!");
      }
    });
  }
};
function convertKatexToMathJax(input) {
  const terms = ["\\", "_", "^", "=", "+", "/", "\u2202", "\u221A"];
  if (input.includes("\\\\[") || input.includes("\\\\(")) {
    input = input.replace(/\\\\\((.*?)\\\\\)/g, (_match, p12) => {
      return `$${p12.trim()}$`;
    });
    input = input.replace(/\\\\\[(.*?)\\\\\]/gs, (_match, p12) => {
      return `
$$
${p12.trim()}
$$
`;
    });
    return input;
  } else if (input.includes("\\[") || input.includes("\\(")) {
    input = input.replace(/\\\((.*?)\\\)/g, (_match, p12) => {
      return `$${p12.trim()}$`;
    });
    input = input.replace(/\\\[(.*?)\\\]/gs, (_match, p12) => {
      return `
$$
${p12.trim()}
$$
`;
    });
    return input;
  } else if (input.includes("\\")) {
    m = 0;
    all = "";
    equ = 0;
    math = 0;
    string_math_space_ratio = 0.75;
    math_string_ratio = 0.1;
    const lines = input.split(/\r?\n/);
    for (p1 of lines) {
      len = p1.length;
      if (p1.includes("=")) {
        equ = 1;
      } else {
        equ = 0;
      }
      if (len == 1 && m == 0) {
        all = all + "$" + p1 + "$";
        m = 1;
      } else if (len < 12 && terms.some((term) => p1.includes(term))) {
        all = all + "$" + p1 + "$";
        m = 1;
      } else if (equ == 0 && len >= 12 && len <= 20 && terms.some((term) => p1.includes(term))) {
        all = all + "$" + p1 + "$";
        m = 1;
      } else if (equ == 1 && len >= 12 && terms.some((term) => p1.includes(term))) {
        all = all + "$$" + p1 + "$$";
        m = 2;
      } else {
        all = all + p1;
        m = 0;
      }
    }
  } else {
    m = 0;
    all = "";
    equ = 0;
    math = 0;
    string_math_space_ratio = 0.75;
    math_string_ratio = 0.1;
    const lines = input.split(/\r?\n/);
    for (p1 of lines) {
      len = p1.length;
      all_space_len = (p1.match(new RegExp(" ", "g")) || []).length;
      p1_no_space = p1.replaceAll(" + ", "").replaceAll(" - ", "").replaceAll(" = ", "");
      str_space_len = (p1_no_space.match(new RegExp(" ", "g")) || []).length;
      slash_num = (p1_no_space.match(/\\/g) || []).length;
      sub_num = (p1_no_space.match(/\_/g) || []).length;
      console.log(p1_no_space, str_space_len, all_space_len, slash_num, sub_num, len);
      if (str_space_len / all_space_len > string_math_space_ratio && slash_num + sub_num < 3) {
        math = 0;
      } else {
        math = 1;
      }
      if (p1.includes("=")) {
        equ = 1;
      } else {
        equ = 0;
      }
      if (len == 1 && m == 0) {
        all = all + "$" + p1 + "$";
        m = 1;
      } else if (len < 12 && terms.some((term) => p1.includes(term))) {
        all = all + "$" + p1 + "$";
        m = 1;
      } else if (equ == 0 && len >= 12 && len <= 20 && terms.some((term) => p1.includes(term))) {
        all = all + "$" + p1 + "$";
        m = 1;
      } else if (math == 0 && equ == 1 && len >= 12 && terms.some((term) => p1.includes(term))) {
        all = all + p1;
        m = 0;
      } else if (math == 1 && equ == 1 && len >= 12 && terms.some((term) => p1.includes(term))) {
        all = all + "$$" + p1 + "$$";
        m = 2;
      } else {
        all = all + p1 + "\n";
        m = 0;
      }
    }
    ;
    input = all;
    return input;
  }
}
var MathJaxConverterSettingTab = class extends import_obsidian.PluginSettingTab {
  /**
   * Constructs a new instance of the settings tab.
   * 
   * @param app - The application instance.
   * @param plugin - The plugin instance.
   */
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  /**
   * Displays the settings tab.
   * 
   * This method creates the UI elements for the settings tab and sets up
   * event listeners for user interactions.
   */
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable default paste conversion").setDesc("Automatically converts KaTeX to MathJax on paste action.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableDefaultPasteConversion).onChange(async (value) => {
        this.plugin.settings.enableDefaultPasteConversion = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
